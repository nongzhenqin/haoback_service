<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.2.xsd
						http://www.springframework.org/schema/data/jpa
						http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-4.2.xsd ">

	<!-- JNDI方式配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="${jndiName}"></property> </bean> -->

	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true"/>

	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${connection.url}" />
		<property name="username" value="${connection.username}" />
		<property name="password" value="${connection.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql不需要此配置。 -->
		<!--<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />-->
		<!--<property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />-->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}" />
	</bean>

	<!-- 配置sessionFactory -->
	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		数据源
		<property name="dataSource" ref="dataSource" />
		hibernate的相关属性配置
		<property name="hibernateProperties">
			<value>
				设置数据库方言
				hibernate.dialect=org.hibernate.dialect.MySQLDialect
				设置自动创建|更新|验证数据库表结构
				hibernate.hbm2ddl.auto=update
				是否在控制台显示sql
				hibernate.show_sql=true
				是否格式化sql，优化显示
				hibernate.format_sql=true
				是否开启二级缓存
				hibernate.cache.use_second_level_cache=false
				是否开启查询缓存
				hibernate.cache.use_query_cache=false
				数据库批量查询最大数
				hibernate.jdbc.fetch_size=50

				数据库批量更新、添加、删除操作最大数
				hibernate.jdbc.batch_size=50
				是否自动提交事务
				hibernate.connection.autocommit=true
				指定hibernate在何时释放JDBC连接
				hibernate.connection.release_mode=auto
				创建session方式 hibernate4.x 的方式
				hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext
				javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
					所以把它设置为none即可
				javax.persistence.validation.mode=none
			</value>
		</property>
		自动扫描实体对象 tdxy.bean的包结构中存放实体类
		<property name="packagesToScan" value="com.nong.framework.**.entity" />
	</bean> -->
	
	<bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="dataSource"/>
    </bean>
    
    <!-- jpa Entity Factory 配置 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    	<property name="dataSource" ref="dataSourceProxy"/>
        <property name="packagesToScan" value="com.haoback.**.entity"/>
        <property name="persistenceUnitName" value="${jpa.persistenceUnitName}"/>
        <property name="persistenceProvider">
            <bean class="org.hibernate.jpa.HibernatePersistenceProvider"/>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="${jpa.generateDdl}"/>
                <property name="database" value="${jpa.database}"/>
                <property name="databasePlatform" value="${jpa.databasePlatform}"/>
                <property name="showSql" value="${jpa.showSql}"/>
            </bean>
        </property>
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <!-- 使用自定义的validator进行jsr303验证 -->
                <!-- <entry key="javax.persistence.validation.factory" value-ref="validator"/> -->
                <!-- jsr303验证模式 因为其要么验证 要么不验证 不能按照规则走 所以此处禁用 -->
                <!-- #http://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html/configuration.html -->
                <entry key="javax.persistence.validation.mode" value="NONE"/>

                <!-- 只扫描class文件，不扫描hbm，默认两个都搜索 -->
                <entry key="hibernate.archive.autodetection" value="class"/>
                <!-- 不检查@NamedQuery -->
                <entry key="hibernate.query.startup_check" value="false"/>

                <entry key="hibernate.query.substitutions" value="${hibernate.query.substitutions}"/>
                <entry key="hibernate.default_batch_fetch_size" value="${hibernate.default_batch_fetch_size}"/>
                <entry key="hibernate.max_fetch_depth" value="${hibernate.max_fetch_depth}"/>
                <entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}"/>
                <entry key="hibernate.bytecode.use_reflection_optimizer" value="${hibernate.bytecode.use_reflection_optimizer}"/>
                <entry key="hibernate.cache.use_second_level_cache" value="${hibernate.cache.use_second_level_cache}"/>
                <entry key="hibernate.cache.use_query_cache" value="${hibernate.cache.use_query_cache}"/>
                <entry key="hibernate.cache.region.factory_class" value="${hibernate.cache.region.factory_class}"/>
                <entry key="net.sf.ehcache.configurationResourceName" value="${net.sf.ehcache.configurationResourceName}"/>
                <!-- <entry key="com.oracle.coherence.hibernate.cache.cache_config_file_path" value="${com.oracle.coherence.hibernate.cache.cache_config_file_path}"/>
                <entry key="com.oracle.coherence.hibernate.cache.debug_message_severity_level" value="${com.oracle.coherence.hibernate.cache.debug_message_severity_level}"/> -->
                <entry key="hibernate.cache.use_structured_entries" value="${hibernate.cache.use_structured_entries}"/>
            </map>
        </property>
    </bean>
    
    <!-- spring data 开启repository扫描 -->
	<jpa:repositories base-package="com.haoback.**.repository"
		entity-manager-factory-ref="entityManagerFactory"
        transaction-manager-ref="transactionManager"></jpa:repositories>

	<!--事务管理器配置-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
	
	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />

			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />

			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.haoback..service..*+.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>
	
	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.nong.framework..service</value>
			</list>
		</property>
	</bean>

	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
</beans>